/* eslint-disable */
// Generated by @convex-dev/cli@0.0.67
// based on the contents of this directory.
// To regenerate, run `convex codegen`.
import type newQuestion from "./newQuestion";
import type { downvote as questions__downvote } from "./questions";
import type { loadQuestions as questions__loadQuestions } from "./questions";
import type { upvote as questions__upvote } from "./questions";
import type { isStopped as stopQuestions__isStopped } from "./stopQuestions";
import type { stopQuestions as stopQuestions__stopQuestions } from "./stopQuestions";

import type { MutationCtx, QueryCtx } from "@convex-dev/server";
type DropFirst<T extends unknown[]> = T extends [any, ...infer U] ? U : never;
type ClientMutation<F extends (first: MutationCtx, ...args: any) => any> = (
  ...args: DropFirst<Parameters<F>>
) => ReturnType<F>;
type ClientQuery<F extends (first: QueryCtx, ...args: any) => any> = (
  ...args: DropFirst<Parameters<F>>
) => ReturnType<F>;

type ConvexAPI = {
  queries: {
    "questions:loadQuestions": ClientQuery<typeof questions__loadQuestions>;
    "stopQuestions:isStopped": ClientQuery<typeof stopQuestions__isStopped>;
  };
  mutations: {
    newQuestion: ClientMutation<typeof newQuestion>;
    "questions:downvote": ClientMutation<typeof questions__downvote>;
    "questions:upvote": ClientMutation<typeof questions__upvote>;
    "stopQuestions:stopQuestions": ClientMutation<typeof stopQuestions__stopQuestions>;
  };
};

import {
  makeUseQuery,
  makeUseMutation,
  makeUseConvex,
} from "@convex-dev/react";

export const useQuery = makeUseQuery<ConvexAPI>();
export const useMutation = makeUseMutation<ConvexAPI>();
export const useConvex = makeUseConvex<ConvexAPI>();
